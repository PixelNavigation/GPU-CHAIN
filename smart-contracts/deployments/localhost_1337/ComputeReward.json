{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.19\"},\"sources\":{\"contracts/ComputeReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ComputeReward\\r\\n * @dev Smart contract for GPU Chain P2P computing rewards\\r\\n * @notice Manages compute tasks, validates results, and distributes rewards\\r\\n */\\r\\ncontract ComputeReward is ERC20, Ownable, ReentrancyGuard {\\r\\n    \\r\\n    // Struct to represent a compute task\\r\\n    struct ComputeTask {\\r\\n        uint256 taskId;\\r\\n        address requester;\\r\\n        address worker;\\r\\n        string taskHash; // IPFS hash or task identifier\\r\\n        uint256 rewardAmount;\\r\\n        uint256 deadline;\\r\\n        TaskStatus status;\\r\\n        string resultHash; // Hash of the computed result\\r\\n        uint256 createdAt;\\r\\n        uint256 completedAt;\\r\\n    }\\r\\n    \\r\\n    // Enum for task status\\r\\n    enum TaskStatus {\\r\\n        PENDING,\\r\\n        ASSIGNED,\\r\\n        COMPLETED,\\r\\n        VERIFIED,\\r\\n        DISPUTED,\\r\\n        CANCELLED\\r\\n    }\\r\\n    \\r\\n    // Events\\r\\n    event TaskCreated(uint256 indexed taskId, address indexed requester, uint256 rewardAmount);\\r\\n    event TaskAssigned(uint256 indexed taskId, address indexed worker);\\r\\n    event TaskCompleted(uint256 indexed taskId, string resultHash);\\r\\n    event TaskVerified(uint256 indexed taskId, address indexed worker, uint256 rewardAmount);\\r\\n    event RewardClaimed(address indexed worker, uint256 amount);\\r\\n    event WorkerRegistered(address indexed worker, string peerId);\\r\\n    event TaskDisputed(uint256 indexed taskId, string reason);\\r\\n    \\r\\n    // State variables\\r\\n    mapping(uint256 => ComputeTask) public tasks;\\r\\n    mapping(address => uint256[]) public userTasks; // Tasks created by user\\r\\n    mapping(address => uint256[]) public workerTasks; // Tasks assigned to worker\\r\\n    mapping(address => uint256) public workerRewards; // Pending rewards for workers\\r\\n    mapping(address => string) public workerPeerIds; // Worker address to Peer ID mapping\\r\\n    mapping(string => address) public peerIdToWorker; // Peer ID to worker address mapping\\r\\n    mapping(address => bool) public registeredWorkers;\\r\\n    mapping(address => uint256) public workerReputation; // Reputation score (0-100)\\r\\n    \\r\\n    uint256 public nextTaskId = 1;\\r\\n    uint256 public totalTasksCreated;\\r\\n    uint256 public totalTasksCompleted;\\r\\n    uint256 public totalRewardsDistributed;\\r\\n    \\r\\n    // Configuration\\r\\n    uint256 public constant TASK_TIMEOUT = 1 hours;\\r\\n    uint256 public constant VERIFICATION_PERIOD = 10 minutes;\\r\\n    uint256 public constant MIN_REWARD = 0.001 ether;\\r\\n    uint256 public constant PLATFORM_FEE_PERCENT = 5; // 5% platform fee\\r\\n    \\r\\n    constructor() ERC20(\\\"GPU Chain Token\\\", \\\"GPUC\\\") {\\r\\n        _mint(msg.sender, 1000000 * 10**decimals()); // Mint initial supply\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Register as a compute worker\\r\\n     * @param peerId The Peer.js ID for P2P communication\\r\\n     */\\r\\n    function registerWorker(string memory peerId) external {\\r\\n        require(bytes(peerId).length > 0, \\\"Invalid peer ID\\\");\\r\\n        require(!registeredWorkers[msg.sender], \\\"Already registered\\\");\\r\\n        require(peerIdToWorker[peerId] == address(0), \\\"Peer ID already taken\\\");\\r\\n        \\r\\n        registeredWorkers[msg.sender] = true;\\r\\n        workerPeerIds[msg.sender] = peerId;\\r\\n        peerIdToWorker[peerId] = msg.sender;\\r\\n        workerReputation[msg.sender] = 50; // Start with neutral reputation\\r\\n        \\r\\n        emit WorkerRegistered(msg.sender, peerId);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a new compute task\\r\\n     * @param taskHash IPFS hash or identifier of the task\\r\\n     * @param deadline Timestamp when task should be completed\\r\\n     */\\r\\n    function createTask(\\r\\n        string memory taskHash,\\r\\n        uint256 deadline\\r\\n    ) external payable nonReentrant {\\r\\n        require(msg.value >= MIN_REWARD, \\\"Reward too low\\\");\\r\\n        require(deadline > block.timestamp, \\\"Invalid deadline\\\");\\r\\n        require(bytes(taskHash).length > 0, \\\"Invalid task hash\\\");\\r\\n        \\r\\n        uint256 taskId = nextTaskId++;\\r\\n        uint256 platformFee = (msg.value * PLATFORM_FEE_PERCENT) / 100;\\r\\n        uint256 rewardAmount = msg.value - platformFee;\\r\\n        \\r\\n        tasks[taskId] = ComputeTask({\\r\\n            taskId: taskId,\\r\\n            requester: msg.sender,\\r\\n            worker: address(0),\\r\\n            taskHash: taskHash,\\r\\n            rewardAmount: rewardAmount,\\r\\n            deadline: deadline,\\r\\n            status: TaskStatus.PENDING,\\r\\n            resultHash: \\\"\\\",\\r\\n            createdAt: block.timestamp,\\r\\n            completedAt: 0\\r\\n        });\\r\\n        \\r\\n        userTasks[msg.sender].push(taskId);\\r\\n        totalTasksCreated++;\\r\\n        \\r\\n        emit TaskCreated(taskId, msg.sender, rewardAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Assign task to a worker (can be called by worker or task creator)\\r\\n     * @param taskId The ID of the task to assign\\r\\n     * @param worker The address of the worker\\r\\n     */\\r\\n    function assignTask(uint256 taskId, address worker) external {\\r\\n        ComputeTask storage task = tasks[taskId];\\r\\n        require(task.taskId != 0, \\\"Task does not exist\\\");\\r\\n        require(task.status == TaskStatus.PENDING, \\\"Task not available\\\");\\r\\n        require(registeredWorkers[worker], \\\"Worker not registered\\\");\\r\\n        require(\\r\\n            msg.sender == task.requester || msg.sender == worker,\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n        \\r\\n        task.worker = worker;\\r\\n        task.status = TaskStatus.ASSIGNED;\\r\\n        workerTasks[worker].push(taskId);\\r\\n        \\r\\n        emit TaskAssigned(taskId, worker);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Submit task completion with result\\r\\n     * @param taskId The ID of the completed task\\r\\n     * @param resultHash Hash of the computed result\\r\\n     */\\r\\n    function submitResult(uint256 taskId, string memory resultHash) external {\\r\\n        ComputeTask storage task = tasks[taskId];\\r\\n        require(task.taskId != 0, \\\"Task does not exist\\\");\\r\\n        require(task.worker == msg.sender, \\\"Not assigned to you\\\");\\r\\n        require(task.status == TaskStatus.ASSIGNED, \\\"Task not in progress\\\");\\r\\n        require(block.timestamp <= task.deadline, \\\"Task deadline passed\\\");\\r\\n        require(bytes(resultHash).length > 0, \\\"Invalid result hash\\\");\\r\\n        \\r\\n        task.resultHash = resultHash;\\r\\n        task.status = TaskStatus.COMPLETED;\\r\\n        task.completedAt = block.timestamp;\\r\\n        \\r\\n        emit TaskCompleted(taskId, resultHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Verify and approve task completion (called by requester)\\r\\n     * @param taskId The ID of the task to verify\\r\\n     */\\r\\n    function verifyTask(uint256 taskId) external nonReentrant {\\r\\n        ComputeTask storage task = tasks[taskId];\\r\\n        require(task.taskId != 0, \\\"Task does not exist\\\");\\r\\n        require(task.requester == msg.sender, \\\"Not your task\\\");\\r\\n        require(task.status == TaskStatus.COMPLETED, \\\"Task not completed\\\");\\r\\n        \\r\\n        task.status = TaskStatus.VERIFIED;\\r\\n        workerRewards[task.worker] += task.rewardAmount;\\r\\n        totalTasksCompleted++;\\r\\n        \\r\\n        // Update worker reputation\\r\\n        if (workerReputation[task.worker] < 100) {\\r\\n            workerReputation[task.worker] += 1;\\r\\n        }\\r\\n        \\r\\n        emit TaskVerified(taskId, task.worker, task.rewardAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Dispute a task result\\r\\n     * @param taskId The ID of the task to dispute\\r\\n     * @param reason Reason for the dispute\\r\\n     */\\r\\n    function disputeTask(uint256 taskId, string memory reason) external {\\r\\n        ComputeTask storage task = tasks[taskId];\\r\\n        require(task.taskId != 0, \\\"Task does not exist\\\");\\r\\n        require(task.requester == msg.sender, \\\"Not your task\\\");\\r\\n        require(task.status == TaskStatus.COMPLETED, \\\"Task not completed\\\");\\r\\n        require(\\r\\n            block.timestamp <= task.completedAt + VERIFICATION_PERIOD,\\r\\n            \\\"Verification period expired\\\"\\r\\n        );\\r\\n        \\r\\n        task.status = TaskStatus.DISPUTED;\\r\\n        \\r\\n        // Decrease worker reputation\\r\\n        if (workerReputation[task.worker] > 0) {\\r\\n            workerReputation[task.worker] -= 5;\\r\\n        }\\r\\n        \\r\\n        emit TaskDisputed(taskId, reason);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Auto-verify task if verification period expires\\r\\n     * @param taskId The ID of the task to auto-verify\\r\\n     */\\r\\n    function autoVerifyTask(uint256 taskId) external nonReentrant {\\r\\n        ComputeTask storage task = tasks[taskId];\\r\\n        require(task.taskId != 0, \\\"Task does not exist\\\");\\r\\n        require(task.status == TaskStatus.COMPLETED, \\\"Task not completed\\\");\\r\\n        require(\\r\\n            block.timestamp > task.completedAt + VERIFICATION_PERIOD,\\r\\n            \\\"Verification period not expired\\\"\\r\\n        );\\r\\n        \\r\\n        task.status = TaskStatus.VERIFIED;\\r\\n        workerRewards[task.worker] += task.rewardAmount;\\r\\n        totalTasksCompleted++;\\r\\n        \\r\\n        // Update worker reputation\\r\\n        if (workerReputation[task.worker] < 100) {\\r\\n            workerReputation[task.worker] += 1;\\r\\n        }\\r\\n        \\r\\n        emit TaskVerified(taskId, task.worker, task.rewardAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Claim accumulated rewards\\r\\n     */\\r\\n    function claimRewards() external nonReentrant {\\r\\n        uint256 amount = workerRewards[msg.sender];\\r\\n        require(amount > 0, \\\"No rewards to claim\\\");\\r\\n        \\r\\n        workerRewards[msg.sender] = 0;\\r\\n        totalRewardsDistributed += amount;\\r\\n        \\r\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        \\r\\n        emit RewardClaimed(msg.sender, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get task details\\r\\n     * @param taskId The ID of the task\\r\\n     */\\r\\n    function getTask(uint256 taskId) external view returns (ComputeTask memory) {\\r\\n        require(tasks[taskId].taskId != 0, \\\"Task does not exist\\\");\\r\\n        return tasks[taskId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get tasks created by a user\\r\\n     * @param user The address of the user\\r\\n     */\\r\\n    function getUserTasks(address user) external view returns (uint256[] memory) {\\r\\n        return userTasks[user];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get tasks assigned to a worker\\r\\n     * @param worker The address of the worker\\r\\n     */\\r\\n    function getWorkerTasks(address worker) external view returns (uint256[] memory) {\\r\\n        return workerTasks[worker];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get available tasks for workers\\r\\n     * @param limit Maximum number of tasks to return\\r\\n     */\\r\\n    function getAvailableTasks(uint256 limit) external view returns (uint256[] memory) {\\r\\n        uint256[] memory availableTaskIds = new uint256[](limit);\\r\\n        uint256 count = 0;\\r\\n        \\r\\n        for (uint256 i = 1; i < nextTaskId && count < limit; i++) {\\r\\n            if (tasks[i].status == TaskStatus.PENDING && tasks[i].deadline > block.timestamp) {\\r\\n                availableTaskIds[count] = i;\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Resize array to actual count\\r\\n        uint256[] memory result = new uint256[](count);\\r\\n        for (uint256 j = 0; j < count; j++) {\\r\\n            result[j] = availableTaskIds[j];\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get worker information\\r\\n     * @param worker The address of the worker\\r\\n     */\\r\\n    function getWorkerInfo(address worker) external view returns (\\r\\n        bool isRegistered,\\r\\n        string memory peerId,\\r\\n        uint256 reputation,\\r\\n        uint256 pendingRewards,\\r\\n        uint256 completedTasks\\r\\n    ) {\\r\\n        return (\\r\\n            registeredWorkers[worker],\\r\\n            workerPeerIds[worker],\\r\\n            workerReputation[worker],\\r\\n            workerRewards[worker],\\r\\n            workerTasks[worker].length\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get platform statistics\\r\\n     */\\r\\n    function getPlatformStats() external view returns (\\r\\n        uint256 totalTasks,\\r\\n        uint256 completedTasks,\\r\\n        uint256 totalRewards,\\r\\n        uint256 activeWorkers\\r\\n    ) {\\r\\n        // Count active workers (simplified)\\r\\n        uint256 activeWorkerCount = 0;\\r\\n        // Note: In production, you'd want a more efficient way to track this\\r\\n        \\r\\n        return (\\r\\n            totalTasksCreated,\\r\\n            totalTasksCompleted,\\r\\n            totalRewardsDistributed,\\r\\n            activeWorkerCount\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emergency function to cancel task (only owner)\\r\\n     * @param taskId The ID of the task to cancel\\r\\n     */\\r\\n    function emergencyCancel(uint256 taskId) external onlyOwner nonReentrant {\\r\\n        ComputeTask storage task = tasks[taskId];\\r\\n        require(task.taskId != 0, \\\"Task does not exist\\\");\\r\\n        require(task.status != TaskStatus.VERIFIED, \\\"Task already verified\\\");\\r\\n        \\r\\n        task.status = TaskStatus.CANCELLED;\\r\\n        \\r\\n        // Refund the requester\\r\\n        (bool success, ) = task.requester.call{value: task.rewardAmount}(\\\"\\\");\\r\\n        require(success, \\\"Refund failed\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Withdraw platform fees (only owner)\\r\\n     */\\r\\n    function withdrawPlatformFees() external onlyOwner nonReentrant {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No fees to withdraw\\\");\\r\\n        \\r\\n        (bool success, ) = owner().call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Withdrawal failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.19\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x0B306BF915C4d645ff596e518fAf3F9669b97016","bytecode":"0x60806040526001600f553480156200001657600080fd5b506040518060400160405280600f81526020016e23a82a9021b430b4b7102a37b5b2b760891b815250604051806040016040528060048152602001634750554360e01b81525081600390816200006d919062000291565b5060046200007c828262000291565b5050506200009962000093620000cc60201b60201c565b620000d0565b6001600655620000c633620000b16012600a62000472565b620000c090620f42406200048a565b62000122565b620004ba565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166200017d5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001919190620004a4565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021857607f821691505b6020821081036200023957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e857600081815260208120601f850160051c81016020861015620002685750805b601f850160051c820191505b81811015620002895782815560010162000274565b505050505050565b81516001600160401b03811115620002ad57620002ad620001ed565b620002c581620002be845462000203565b846200023f565b602080601f831160018114620002fd5760008415620002e45750858301515b600019600386901b1c1916600185901b17855562000289565b600085815260208120601f198616915b828110156200032e578886015182559484019460019091019084016200030d565b50858210156200034d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003b45781600019048211156200039857620003986200035d565b80851615620003a657918102915b93841c939080029062000378565b509250929050565b600082620003cd575060016200046c565b81620003dc575060006200046c565b8160018114620003f55760028114620004005762000420565b60019150506200046c565b60ff8411156200041457620004146200035d565b50506001821b6200046c565b5060208310610133831016604e8410600b841016171562000445575081810a6200046c565b62000451838362000373565b80600019048211156200046857620004686200035d565b0290505b92915050565b60006200048360ff841683620003bc565b9392505050565b80820281158282048414176200046c576200046c6200035d565b808201808211156200046c576200046c6200035d565b612eac80620004ca6000396000f3fe60806040526004361061027d5760003560e01c806366873a551161014f578063aae895c5116100c1578063dd75cd9b1161007a578063dd75cd9b146107e2578063ee17254614610802578063f2fde38b14610818578063fa62375c14610838578063fd4df69b14610879578063fdc3d8d71461088f57600080fd5b8063aae895c51461071c578063ac760d811461073c578063bc5fe2d91461075c578063ce8ef7a61461077c578063d0b7830b146107ad578063dd62ed3e146107c257600080fd5b80638d977672116101135780638d977672146106325780638da5cb5b1461066857806395d576601461069a57806395d89b41146106c7578063a457c2d7146106dc578063a9059cbb146106fc57600080fd5b806366873a551461058757806370a08231146105a7578063715018a6146105dd57806380c8f4fa146105f25780638c0dd79a1461061257600080fd5b8063313ce567116101f35780634bddd209116101ac5780634bddd209146104e6578063521523ff146105065780635293ee811461051c5780635573e3ef1461053c578063560d52d41461055c5780635e9dbe4f1461057157600080fd5b8063313ce5671461041d5780633355bc4d14610439578063372500ab14610466578063395093511461047b578063420569da1461049b57806348ea0c03146104cb57600080fd5b8063108ab45e11610245578063108ab45e1461034d578063136d88831461036357806318160ddd1461039b5780631d65e77e146103b057806323b872dd146103dd5780632bf70dee146103fd57600080fd5b806304fe2b341461028257806306fdde031461029757806308a101b8146102c2578063095ea7b3146102fd578063103027d21461032d575b600080fd5b6102956102903660046127e8565b6108a5565b005b3480156102a357600080fd5b506102ac610b63565b6040516102b9919061287d565b60405180910390f35b3480156102ce57600080fd5b506102ef6102dd3660046128b3565b600e6020526000908152604090205481565b6040519081526020016102b9565b34801561030957600080fd5b5061031d6103183660046128ce565b610bf5565b60405190151581526020016102b9565b34801561033957600080fd5b506102956103483660046128f8565b610c0f565b34801561035957600080fd5b506102ef60115481565b34801561036f57600080fd5b5060105460115460125460006040805194855260208501939093529183015260608201526080016102b9565b3480156103a757600080fd5b506002546102ef565b3480156103bc57600080fd5b506103d06103cb3660046128f8565b610de9565b6040516102b99190612949565b3480156103e957600080fd5b5061031d6103f8366004612a07565b61103e565b34801561040957600080fd5b506102ef6104183660046128ce565b611062565b34801561042957600080fd5b50604051601281526020016102b9565b34801561044557600080fd5b506102ef6104543660046128b3565b600a6020526000908152604090205481565b34801561047257600080fd5b50610295611093565b34801561048757600080fd5b5061031d6104963660046128ce565b6111e4565b3480156104a757600080fd5b5061031d6104b63660046128b3565b600d6020526000908152604090205460ff1681565b3480156104d757600080fd5b506102ef66038d7ea4c6800081565b3480156104f257600080fd5b50610295610501366004612a43565b611206565b34801561051257600080fd5b506102ef61025881565b34801561052857600080fd5b50610295610537366004612a8a565b6113bb565b34801561054857600080fd5b506102956105573660046128f8565b611588565b34801561056857600080fd5b506102ef600581565b34801561057d57600080fd5b506102ef610e1081565b34801561059357600080fd5b506102ef6105a23660046128ce565b611643565b3480156105b357600080fd5b506102ef6105c23660046128b3565b6001600160a01b031660009081526020819052604090205490565b3480156105e957600080fd5b5061029561165f565b3480156105fe57600080fd5b5061029561060d366004612ab6565b611671565b34801561061e57600080fd5b5061029561062d366004612a43565b61183c565b34801561063e57600080fd5b5061065261064d3660046128f8565b611a04565b6040516102b99a99989796959493929190612af3565b34801561067457600080fd5b506005546001600160a01b03165b6040516001600160a01b0390911681526020016102b9565b3480156106a657600080fd5b506106ba6106b53660046128b3565b611b78565b6040516102b99190612b6f565b3480156106d357600080fd5b506102ac611be4565b3480156106e857600080fd5b5061031d6106f73660046128ce565b611bf3565b34801561070857600080fd5b5061031d6107173660046128ce565b611c6e565b34801561072857600080fd5b506106ba6107373660046128b3565b611c7c565b34801561074857600080fd5b506106ba6107573660046128f8565b611ce6565b34801561076857600080fd5b506102ac6107773660046128b3565b611e74565b34801561078857600080fd5b5061079c6107973660046128b3565b611f0e565b6040516102b9959493929190612bb3565b3480156107b957600080fd5b50610295611ffd565b3480156107ce57600080fd5b506102ef6107dd366004612beb565b612105565b3480156107ee57600080fd5b506102956107fd3660046128f8565b612130565b34801561080e57600080fd5b506102ef60125481565b34801561082457600080fd5b506102956108333660046128b3565b612283565b34801561084457600080fd5b50610682610853366004612ab6565b8051602081830181018051600c825292820191909301209152546001600160a01b031681565b34801561088557600080fd5b506102ef60105481565b34801561089b57600080fd5b506102ef600f5481565b6108ad6122f9565b66038d7ea4c680003410156108fa5760405162461bcd60e51b815260206004820152600e60248201526d52657761726420746f6f206c6f7760901b60448201526064015b60405180910390fd5b42811161093c5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b60448201526064016108f1565b60008251116109815760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e8c2e6d640d0c2e6d607b1b60448201526064016108f1565b600f80546000918261099283612c2b565b909155509050600060646109a7600534612c44565b6109b19190612c5b565b905060006109bf8234612c7d565b60408051610140810182528581523360208083019182526000838501818152606085018c81526080860188905260a086018c905260c086018390528651808501885283815260e08701524261010087015261012086018390528a835260079093529490208351815591516001830180546001600160a01b03199081166001600160a01b039384161790915594516002840180549096169116179093559151929350916003820190610a709082612d18565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690836005811115610aaf57610aaf612911565b021790555060e08201516007820190610ac89082612d18565b506101008201516008808301919091556101209092015160099091015533600090815260209182526040812080546001810182559082529181209091018490556010805491610b1683612c2b565b9091555050604051818152339084907f6cf53aa7292e664152c2ea948c3b3c95d4b05c36daeb2626d0293473c4a4a1539060200160405180910390a3505050610b5f6001600655565b5050565b606060038054610b7290612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9e90612c90565b8015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b5050505050905090565b600033610c03818585612352565b60019150505b92915050565b610c176122f9565b60008181526007602052604081208054909103610c465760405162461bcd60e51b81526004016108f190612dd8565b6002600682015460ff166005811115610c6157610c61612911565b14610c7e5760405162461bcd60e51b81526004016108f190612e05565b6102588160090154610c909190612e31565b4211610cde5760405162461bcd60e51b815260206004820152601f60248201527f566572696669636174696f6e20706572696f64206e6f7420657870697265640060448201526064016108f1565b60068101805460ff19166003179055600481015460028201546001600160a01b03166000908152600a602052604081208054909190610d1e908490612e31565b909155505060118054906000610d3383612c2b565b909155505060028101546001600160a01b03166000908152600e602052604090205460641115610d905760028101546001600160a01b03166000908152600e60205260408120805460019290610d8a908490612e31565b90915550505b600281015460048201546040519081526001600160a01b039091169083907f477d9dbad436f899729571bd347ca39a0d163bbc0870482ce5e298e4145d42519060200160405180910390a350610de66001600655565b50565b610e3e60408051610140810182526000808252602082018190529181018290526060808201526080810182905260a081018290529060c082019081526020016060815260200160008152602001600081525090565b6000828152600760205260408120549003610e6b5760405162461bcd60e51b81526004016108f190612dd8565b6000828152600760209081526040918290208251610140810184528154815260018201546001600160a01b0390811693820193909352600282015490921692820192909252600382018054919291606084019190610ec890612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef490612c90565b8015610f415780601f10610f1657610100808354040283529160200191610f41565b820191906000526020600020905b815481529060010190602001808311610f2457829003601f168201915b5050509183525050600482015460208201526005808301546040830152600683015460609092019160ff1690811115610f7c57610f7c612911565b6005811115610f8d57610f8d612911565b8152602001600782018054610fa190612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcd90612c90565b801561101a5780601f10610fef5761010080835404028352916020019161101a565b820191906000526020600020905b815481529060010190602001808311610ffd57829003601f168201915b50505050508152602001600882015481526020016009820154815250509050919050565b60003361104c858285612476565b6110578585856124f0565b506001949350505050565b6009602052816000526040600020818154811061107e57600080fd5b90600052602060002001600091509150505481565b61109b6122f9565b336000908152600a6020526040902054806110ee5760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064016108f1565b336000908152600a6020526040812081905560128054839290611112908490612e31565b9091555050604051600090339083908381818185875af1925050503d8060008114611159576040519150601f19603f3d011682016040523d82523d6000602084013e61115e565b606091505b50509050806111a15760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016108f1565b60405182815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a250506111e26001600655565b565b600033610c038185856111f78383612105565b6112019190612e31565b612352565b600082815260076020526040812080549091036112355760405162461bcd60e51b81526004016108f190612dd8565b60018101546001600160a01b031633146112815760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f7572207461736b60981b60448201526064016108f1565b6002600682015460ff16600581111561129c5761129c612911565b146112b95760405162461bcd60e51b81526004016108f190612e05565b61025881600901546112cb9190612e31565b42111561131a5760405162461bcd60e51b815260206004820152601b60248201527f566572696669636174696f6e20706572696f642065787069726564000000000060448201526064016108f1565b60068101805460ff1916600417905560028101546001600160a01b03166000908152600e60205260409020541561137e5760028101546001600160a01b03166000908152600e60205260408120805460059290611378908490612c7d565b90915550505b827f08824ea73fe0c710b8488bb1d0d50ab5b21b6019aa7eaebafbe0076e5f7ab945836040516113ae919061287d565b60405180910390a2505050565b600082815260076020526040812080549091036113ea5760405162461bcd60e51b81526004016108f190612dd8565b6000600682015460ff16600581111561140557611405612911565b146114475760405162461bcd60e51b81526020600482015260126024820152715461736b206e6f7420617661696c61626c6560701b60448201526064016108f1565b6001600160a01b0382166000908152600d602052604090205460ff166114a75760405162461bcd60e51b815260206004820152601560248201527415dbdc9ad95c881b9bdd081c9959da5cdd195c9959605a1b60448201526064016108f1565b60018101546001600160a01b03163314806114ca5750336001600160a01b038316145b6115075760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016108f1565b6002810180546001600160a01b0319166001600160a01b03841690811790915560068201805460ff191660019081179091556000828152600960209081526040808320805494850181558352908220909201869055905185917f52476d55ecef5cf13caa64038f297fe6bbf865d9584a98b8722a15a6d5db128f91a3505050565b6115906122f9565b600081815260076020526040812080549091036115bf5760405162461bcd60e51b81526004016108f190612dd8565b60018101546001600160a01b0316331461160b5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f7572207461736b60981b60448201526064016108f1565b6002600682015460ff16600581111561162657611626612911565b14610cde5760405162461bcd60e51b81526004016108f190612e05565b6008602052816000526040600020818154811061107e57600080fd5b611667612694565b6111e260006126ee565b60008151116116b45760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c19595c881251608a1b60448201526064016108f1565b336000908152600d602052604090205460ff16156117095760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016108f1565b60006001600160a01b0316600c826040516117249190612e44565b908152604051908190036020019020546001600160a01b0316146117825760405162461bcd60e51b81526020600482015260156024820152742832b2b91024a21030b63932b0b23c903a30b5b2b760591b60448201526064016108f1565b336000908152600d60209081526040808320805460ff19166001179055600b90915290206117b08282612d18565b5033600c826040516117c29190612e44565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039590951694909417909355336000818152600e909352912060329055907fb2bc7d962e634836b6f2383ee5f842b8829c7771d414c3f8862c577f4730a3e89061183190849061287d565b60405180910390a250565b6000828152600760205260408120805490910361186b5760405162461bcd60e51b81526004016108f190612dd8565b60028101546001600160a01b031633146118bd5760405162461bcd60e51b81526020600482015260136024820152724e6f742061737369676e656420746f20796f7560681b60448201526064016108f1565b6001600682015460ff1660058111156118d8576118d8612911565b1461191c5760405162461bcd60e51b81526020600482015260146024820152735461736b206e6f7420696e2070726f677265737360601b60448201526064016108f1565b80600501544211156119675760405162461bcd60e51b815260206004820152601460248201527315185cdac8191958591b1a5b99481c185cdcd95960621b60448201526064016108f1565b60008251116119ae5760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840e4cae6ead8e840d0c2e6d606b1b60448201526064016108f1565b600781016119bc8382612d18565b5060068101805460ff1916600217905542600982015560405183907f7e6ffc29fe63759579d96a0457a8f2e08339aca345bd469f59dc2e61f82a5aeb906113ae90859061287d565b600760205260009081526040902080546001820154600283015460038401805493946001600160a01b03938416949390921692611a4090612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6c90612c90565b8015611ab95780601f10611a8e57610100808354040283529160200191611ab9565b820191906000526020600020905b815481529060010190602001808311611a9c57829003601f168201915b5050506004840154600585015460068601546007870180549697939692955060ff909116935090611ae990612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1590612c90565b8015611b625780601f10611b3757610100808354040283529160200191611b62565b820191906000526020600020905b815481529060010190602001808311611b4557829003601f168201915b505050505090806008015490806009015490508a565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015611bd857602002820191906000526020600020905b815481526020019060010190808311611bc4575b50505050509050919050565b606060048054610b7290612c90565b60003381611c018286612105565b905083811015611c615760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016108f1565b6110578286868403612352565b600033610c038185856124f0565b6001600160a01b038116600090815260096020908152604091829020805483518184028101840190945280845260609392830182828015611bd85760200282019190600052602060002090815481526020019060010190808311611bc45750505050509050919050565b606060008267ffffffffffffffff811115611d0357611d03612745565b604051908082528060200260200182016040528015611d2c578160200160208202803683370190505b509050600060015b600f5481108015611d4457508482105b15611dcf5760008181526007602052604081206006015460ff166005811115611d6f57611d6f612911565b148015611d8c575060008181526007602052604090206005015442105b15611dbd5780838381518110611da457611da4612e60565b602090810291909101015281611db981612c2b565b9250505b80611dc781612c2b565b915050611d34565b5060008167ffffffffffffffff811115611deb57611deb612745565b604051908082528060200260200182016040528015611e14578160200160208202803683370190505b50905060005b82811015611e6b57838181518110611e3457611e34612e60565b6020026020010151828281518110611e4e57611e4e612e60565b602090810291909101015280611e6381612c2b565b915050611e1a565b50949350505050565b600b6020526000908152604090208054611e8d90612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb990612c90565b8015611f065780601f10611edb57610100808354040283529160200191611f06565b820191906000526020600020905b815481529060010190602001808311611ee957829003601f168201915b505050505081565b6001600160a01b0381166000908152600d6020908152604080832054600b8352818420600e845282852054600a855283862054600990955292852054815460609587958695869560ff9091169490939192918490611f6b90612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9790612c90565b8015611fe45780601f10611fb957610100808354040283529160200191611fe4565b820191906000526020600020905b815481529060010190602001808311611fc757829003601f168201915b50989f939e50959c50939a509198509650505050505050565b612005612694565b61200d6122f9565b47806120515760405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b60448201526064016108f1565b60006120656005546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d80600081146120af576040519150601f19603f3d011682016040523d82523d6000602084013e6120b4565b606091505b50509050806120f95760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b60448201526064016108f1565b50506111e26001600655565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b612138612694565b6121406122f9565b6000818152600760205260408120805490910361216f5760405162461bcd60e51b81526004016108f190612dd8565b6003600682015460ff16600581111561218a5761218a612911565b036121cf5760405162461bcd60e51b815260206004820152601560248201527415185cdac8185b1c9958591e481d995c9a599a5959605a1b60448201526064016108f1565b60068101805460ff19166005179055600181015460048201546040516000926001600160a01b031691908381818185875af1925050503d8060008114612231576040519150601f19603f3d011682016040523d82523d6000602084013e612236565b606091505b50509050806122775760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b60448201526064016108f1565b5050610de66001600655565b61228b612694565b6001600160a01b0381166122f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f1565b610de6816126ee565b60026006540361234b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108f1565b6002600655565b6001600160a01b0383166123b45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108f1565b6001600160a01b0382166124155760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108f1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006124828484612105565b905060001981146124ea57818110156124dd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108f1565b6124ea8484848403612352565b50505050565b6001600160a01b0383166125545760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016108f1565b6001600160a01b0382166125b65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108f1565b6001600160a01b0383166000908152602081905260409020548181101561262e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016108f1565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36124ea565b6005546001600160a01b031633146111e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108f1565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261276c57600080fd5b813567ffffffffffffffff8082111561278757612787612745565b604051601f8301601f19908116603f011681019082821181831017156127af576127af612745565b816040528381528660208588010111156127c857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156127fb57600080fd5b823567ffffffffffffffff81111561281257600080fd5b61281e8582860161275b565b95602094909401359450505050565b60005b83811015612848578181015183820152602001612830565b50506000910152565b6000815180845261286981602086016020860161282d565b601f01601f19169290920160200192915050565b6020815260006128906020830184612851565b9392505050565b80356001600160a01b03811681146128ae57600080fd5b919050565b6000602082840312156128c557600080fd5b61289082612897565b600080604083850312156128e157600080fd5b6128ea83612897565b946020939093013593505050565b60006020828403121561290a57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6006811061294557634e487b7160e01b600052602160045260246000fd5b9052565b60208152815160208201526000602083015161297060408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516101408060808501526129a2610160850183612851565b9150608085015160a085015260a085015160c085015260c08501516129ca60e0860182612927565b5060e0850151610100601f1986850301818701526129e88483612851565b9087015161012087810191909152909601519190940152509192915050565b600080600060608486031215612a1c57600080fd5b612a2584612897565b9250612a3360208501612897565b9150604084013590509250925092565b60008060408385031215612a5657600080fd5b82359150602083013567ffffffffffffffff811115612a7457600080fd5b612a808582860161275b565b9150509250929050565b60008060408385031215612a9d57600080fd5b82359150612aad60208401612897565b90509250929050565b600060208284031215612ac857600080fd5b813567ffffffffffffffff811115612adf57600080fd5b612aeb8482850161275b565b949350505050565b8a81526001600160a01b038a811660208301528916604082015261014060608201819052600090612b268382018b612851565b90508860808401528760a0840152612b4160c0840188612927565b82810360e0840152612b538187612851565b6101008401959095525050610120015298975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ba757835183529284019291840191600101612b8b565b50909695505050505050565b851515815260a060208201526000612bce60a0830187612851565b604083019590955250606081019290925260809091015292915050565b60008060408385031215612bfe57600080fd5b612c0783612897565b9150612aad60208401612897565b634e487b7160e01b600052601160045260246000fd5b600060018201612c3d57612c3d612c15565b5060010190565b8082028115828204841417610c0957610c09612c15565b600082612c7857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610c0957610c09612c15565b600181811c90821680612ca457607f821691505b602082108103612cc457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561274057600081815260208120601f850160051c81016020861015612cf15750805b601f850160051c820191505b81811015612d1057828155600101612cfd565b505050505050565b815167ffffffffffffffff811115612d3257612d32612745565b612d4681612d408454612c90565b84612cca565b602080601f831160018114612d7b5760008415612d635750858301515b600019600386901b1c1916600185901b178555612d10565b600085815260208120601f198616915b82811015612daa57888601518255948401946001909101908401612d8b565b5085821015612dc85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526013908201527215185cdac8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60208082526012908201527115185cdac81b9bdd0818dbdb5c1b195d195960721b604082015260600190565b80820180821115610c0957610c09612c15565b60008251612e5681846020870161282d565b9190910192915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122074b00649ee5433d29db2f6edafcf922850bb8cb0e1b5f0ec0c35f657b5d6c3a164736f6c63430008130033","deployedBytecode":"0x60806040526004361061027d5760003560e01c806366873a551161014f578063aae895c5116100c1578063dd75cd9b1161007a578063dd75cd9b146107e2578063ee17254614610802578063f2fde38b14610818578063fa62375c14610838578063fd4df69b14610879578063fdc3d8d71461088f57600080fd5b8063aae895c51461071c578063ac760d811461073c578063bc5fe2d91461075c578063ce8ef7a61461077c578063d0b7830b146107ad578063dd62ed3e146107c257600080fd5b80638d977672116101135780638d977672146106325780638da5cb5b1461066857806395d576601461069a57806395d89b41146106c7578063a457c2d7146106dc578063a9059cbb146106fc57600080fd5b806366873a551461058757806370a08231146105a7578063715018a6146105dd57806380c8f4fa146105f25780638c0dd79a1461061257600080fd5b8063313ce567116101f35780634bddd209116101ac5780634bddd209146104e6578063521523ff146105065780635293ee811461051c5780635573e3ef1461053c578063560d52d41461055c5780635e9dbe4f1461057157600080fd5b8063313ce5671461041d5780633355bc4d14610439578063372500ab14610466578063395093511461047b578063420569da1461049b57806348ea0c03146104cb57600080fd5b8063108ab45e11610245578063108ab45e1461034d578063136d88831461036357806318160ddd1461039b5780631d65e77e146103b057806323b872dd146103dd5780632bf70dee146103fd57600080fd5b806304fe2b341461028257806306fdde031461029757806308a101b8146102c2578063095ea7b3146102fd578063103027d21461032d575b600080fd5b6102956102903660046127e8565b6108a5565b005b3480156102a357600080fd5b506102ac610b63565b6040516102b9919061287d565b60405180910390f35b3480156102ce57600080fd5b506102ef6102dd3660046128b3565b600e6020526000908152604090205481565b6040519081526020016102b9565b34801561030957600080fd5b5061031d6103183660046128ce565b610bf5565b60405190151581526020016102b9565b34801561033957600080fd5b506102956103483660046128f8565b610c0f565b34801561035957600080fd5b506102ef60115481565b34801561036f57600080fd5b5060105460115460125460006040805194855260208501939093529183015260608201526080016102b9565b3480156103a757600080fd5b506002546102ef565b3480156103bc57600080fd5b506103d06103cb3660046128f8565b610de9565b6040516102b99190612949565b3480156103e957600080fd5b5061031d6103f8366004612a07565b61103e565b34801561040957600080fd5b506102ef6104183660046128ce565b611062565b34801561042957600080fd5b50604051601281526020016102b9565b34801561044557600080fd5b506102ef6104543660046128b3565b600a6020526000908152604090205481565b34801561047257600080fd5b50610295611093565b34801561048757600080fd5b5061031d6104963660046128ce565b6111e4565b3480156104a757600080fd5b5061031d6104b63660046128b3565b600d6020526000908152604090205460ff1681565b3480156104d757600080fd5b506102ef66038d7ea4c6800081565b3480156104f257600080fd5b50610295610501366004612a43565b611206565b34801561051257600080fd5b506102ef61025881565b34801561052857600080fd5b50610295610537366004612a8a565b6113bb565b34801561054857600080fd5b506102956105573660046128f8565b611588565b34801561056857600080fd5b506102ef600581565b34801561057d57600080fd5b506102ef610e1081565b34801561059357600080fd5b506102ef6105a23660046128ce565b611643565b3480156105b357600080fd5b506102ef6105c23660046128b3565b6001600160a01b031660009081526020819052604090205490565b3480156105e957600080fd5b5061029561165f565b3480156105fe57600080fd5b5061029561060d366004612ab6565b611671565b34801561061e57600080fd5b5061029561062d366004612a43565b61183c565b34801561063e57600080fd5b5061065261064d3660046128f8565b611a04565b6040516102b99a99989796959493929190612af3565b34801561067457600080fd5b506005546001600160a01b03165b6040516001600160a01b0390911681526020016102b9565b3480156106a657600080fd5b506106ba6106b53660046128b3565b611b78565b6040516102b99190612b6f565b3480156106d357600080fd5b506102ac611be4565b3480156106e857600080fd5b5061031d6106f73660046128ce565b611bf3565b34801561070857600080fd5b5061031d6107173660046128ce565b611c6e565b34801561072857600080fd5b506106ba6107373660046128b3565b611c7c565b34801561074857600080fd5b506106ba6107573660046128f8565b611ce6565b34801561076857600080fd5b506102ac6107773660046128b3565b611e74565b34801561078857600080fd5b5061079c6107973660046128b3565b611f0e565b6040516102b9959493929190612bb3565b3480156107b957600080fd5b50610295611ffd565b3480156107ce57600080fd5b506102ef6107dd366004612beb565b612105565b3480156107ee57600080fd5b506102956107fd3660046128f8565b612130565b34801561080e57600080fd5b506102ef60125481565b34801561082457600080fd5b506102956108333660046128b3565b612283565b34801561084457600080fd5b50610682610853366004612ab6565b8051602081830181018051600c825292820191909301209152546001600160a01b031681565b34801561088557600080fd5b506102ef60105481565b34801561089b57600080fd5b506102ef600f5481565b6108ad6122f9565b66038d7ea4c680003410156108fa5760405162461bcd60e51b815260206004820152600e60248201526d52657761726420746f6f206c6f7760901b60448201526064015b60405180910390fd5b42811161093c5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420646561646c696e6560801b60448201526064016108f1565b60008251116109815760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e8c2e6d640d0c2e6d607b1b60448201526064016108f1565b600f80546000918261099283612c2b565b909155509050600060646109a7600534612c44565b6109b19190612c5b565b905060006109bf8234612c7d565b60408051610140810182528581523360208083019182526000838501818152606085018c81526080860188905260a086018c905260c086018390528651808501885283815260e08701524261010087015261012086018390528a835260079093529490208351815591516001830180546001600160a01b03199081166001600160a01b039384161790915594516002840180549096169116179093559151929350916003820190610a709082612d18565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690836005811115610aaf57610aaf612911565b021790555060e08201516007820190610ac89082612d18565b506101008201516008808301919091556101209092015160099091015533600090815260209182526040812080546001810182559082529181209091018490556010805491610b1683612c2b565b9091555050604051818152339084907f6cf53aa7292e664152c2ea948c3b3c95d4b05c36daeb2626d0293473c4a4a1539060200160405180910390a3505050610b5f6001600655565b5050565b606060038054610b7290612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9e90612c90565b8015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b5050505050905090565b600033610c03818585612352565b60019150505b92915050565b610c176122f9565b60008181526007602052604081208054909103610c465760405162461bcd60e51b81526004016108f190612dd8565b6002600682015460ff166005811115610c6157610c61612911565b14610c7e5760405162461bcd60e51b81526004016108f190612e05565b6102588160090154610c909190612e31565b4211610cde5760405162461bcd60e51b815260206004820152601f60248201527f566572696669636174696f6e20706572696f64206e6f7420657870697265640060448201526064016108f1565b60068101805460ff19166003179055600481015460028201546001600160a01b03166000908152600a602052604081208054909190610d1e908490612e31565b909155505060118054906000610d3383612c2b565b909155505060028101546001600160a01b03166000908152600e602052604090205460641115610d905760028101546001600160a01b03166000908152600e60205260408120805460019290610d8a908490612e31565b90915550505b600281015460048201546040519081526001600160a01b039091169083907f477d9dbad436f899729571bd347ca39a0d163bbc0870482ce5e298e4145d42519060200160405180910390a350610de66001600655565b50565b610e3e60408051610140810182526000808252602082018190529181018290526060808201526080810182905260a081018290529060c082019081526020016060815260200160008152602001600081525090565b6000828152600760205260408120549003610e6b5760405162461bcd60e51b81526004016108f190612dd8565b6000828152600760209081526040918290208251610140810184528154815260018201546001600160a01b0390811693820193909352600282015490921692820192909252600382018054919291606084019190610ec890612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef490612c90565b8015610f415780601f10610f1657610100808354040283529160200191610f41565b820191906000526020600020905b815481529060010190602001808311610f2457829003601f168201915b5050509183525050600482015460208201526005808301546040830152600683015460609092019160ff1690811115610f7c57610f7c612911565b6005811115610f8d57610f8d612911565b8152602001600782018054610fa190612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcd90612c90565b801561101a5780601f10610fef5761010080835404028352916020019161101a565b820191906000526020600020905b815481529060010190602001808311610ffd57829003601f168201915b50505050508152602001600882015481526020016009820154815250509050919050565b60003361104c858285612476565b6110578585856124f0565b506001949350505050565b6009602052816000526040600020818154811061107e57600080fd5b90600052602060002001600091509150505481565b61109b6122f9565b336000908152600a6020526040902054806110ee5760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064016108f1565b336000908152600a6020526040812081905560128054839290611112908490612e31565b9091555050604051600090339083908381818185875af1925050503d8060008114611159576040519150601f19603f3d011682016040523d82523d6000602084013e61115e565b606091505b50509050806111a15760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016108f1565b60405182815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a250506111e26001600655565b565b600033610c038185856111f78383612105565b6112019190612e31565b612352565b600082815260076020526040812080549091036112355760405162461bcd60e51b81526004016108f190612dd8565b60018101546001600160a01b031633146112815760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f7572207461736b60981b60448201526064016108f1565b6002600682015460ff16600581111561129c5761129c612911565b146112b95760405162461bcd60e51b81526004016108f190612e05565b61025881600901546112cb9190612e31565b42111561131a5760405162461bcd60e51b815260206004820152601b60248201527f566572696669636174696f6e20706572696f642065787069726564000000000060448201526064016108f1565b60068101805460ff1916600417905560028101546001600160a01b03166000908152600e60205260409020541561137e5760028101546001600160a01b03166000908152600e60205260408120805460059290611378908490612c7d565b90915550505b827f08824ea73fe0c710b8488bb1d0d50ab5b21b6019aa7eaebafbe0076e5f7ab945836040516113ae919061287d565b60405180910390a2505050565b600082815260076020526040812080549091036113ea5760405162461bcd60e51b81526004016108f190612dd8565b6000600682015460ff16600581111561140557611405612911565b146114475760405162461bcd60e51b81526020600482015260126024820152715461736b206e6f7420617661696c61626c6560701b60448201526064016108f1565b6001600160a01b0382166000908152600d602052604090205460ff166114a75760405162461bcd60e51b815260206004820152601560248201527415dbdc9ad95c881b9bdd081c9959da5cdd195c9959605a1b60448201526064016108f1565b60018101546001600160a01b03163314806114ca5750336001600160a01b038316145b6115075760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016108f1565b6002810180546001600160a01b0319166001600160a01b03841690811790915560068201805460ff191660019081179091556000828152600960209081526040808320805494850181558352908220909201869055905185917f52476d55ecef5cf13caa64038f297fe6bbf865d9584a98b8722a15a6d5db128f91a3505050565b6115906122f9565b600081815260076020526040812080549091036115bf5760405162461bcd60e51b81526004016108f190612dd8565b60018101546001600160a01b0316331461160b5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420796f7572207461736b60981b60448201526064016108f1565b6002600682015460ff16600581111561162657611626612911565b14610cde5760405162461bcd60e51b81526004016108f190612e05565b6008602052816000526040600020818154811061107e57600080fd5b611667612694565b6111e260006126ee565b60008151116116b45760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c19595c881251608a1b60448201526064016108f1565b336000908152600d602052604090205460ff16156117095760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016108f1565b60006001600160a01b0316600c826040516117249190612e44565b908152604051908190036020019020546001600160a01b0316146117825760405162461bcd60e51b81526020600482015260156024820152742832b2b91024a21030b63932b0b23c903a30b5b2b760591b60448201526064016108f1565b336000908152600d60209081526040808320805460ff19166001179055600b90915290206117b08282612d18565b5033600c826040516117c29190612e44565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039590951694909417909355336000818152600e909352912060329055907fb2bc7d962e634836b6f2383ee5f842b8829c7771d414c3f8862c577f4730a3e89061183190849061287d565b60405180910390a250565b6000828152600760205260408120805490910361186b5760405162461bcd60e51b81526004016108f190612dd8565b60028101546001600160a01b031633146118bd5760405162461bcd60e51b81526020600482015260136024820152724e6f742061737369676e656420746f20796f7560681b60448201526064016108f1565b6001600682015460ff1660058111156118d8576118d8612911565b1461191c5760405162461bcd60e51b81526020600482015260146024820152735461736b206e6f7420696e2070726f677265737360601b60448201526064016108f1565b80600501544211156119675760405162461bcd60e51b815260206004820152601460248201527315185cdac8191958591b1a5b99481c185cdcd95960621b60448201526064016108f1565b60008251116119ae5760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840e4cae6ead8e840d0c2e6d606b1b60448201526064016108f1565b600781016119bc8382612d18565b5060068101805460ff1916600217905542600982015560405183907f7e6ffc29fe63759579d96a0457a8f2e08339aca345bd469f59dc2e61f82a5aeb906113ae90859061287d565b600760205260009081526040902080546001820154600283015460038401805493946001600160a01b03938416949390921692611a4090612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6c90612c90565b8015611ab95780601f10611a8e57610100808354040283529160200191611ab9565b820191906000526020600020905b815481529060010190602001808311611a9c57829003601f168201915b5050506004840154600585015460068601546007870180549697939692955060ff909116935090611ae990612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1590612c90565b8015611b625780601f10611b3757610100808354040283529160200191611b62565b820191906000526020600020905b815481529060010190602001808311611b4557829003601f168201915b505050505090806008015490806009015490508a565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015611bd857602002820191906000526020600020905b815481526020019060010190808311611bc4575b50505050509050919050565b606060048054610b7290612c90565b60003381611c018286612105565b905083811015611c615760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016108f1565b6110578286868403612352565b600033610c038185856124f0565b6001600160a01b038116600090815260096020908152604091829020805483518184028101840190945280845260609392830182828015611bd85760200282019190600052602060002090815481526020019060010190808311611bc45750505050509050919050565b606060008267ffffffffffffffff811115611d0357611d03612745565b604051908082528060200260200182016040528015611d2c578160200160208202803683370190505b509050600060015b600f5481108015611d4457508482105b15611dcf5760008181526007602052604081206006015460ff166005811115611d6f57611d6f612911565b148015611d8c575060008181526007602052604090206005015442105b15611dbd5780838381518110611da457611da4612e60565b602090810291909101015281611db981612c2b565b9250505b80611dc781612c2b565b915050611d34565b5060008167ffffffffffffffff811115611deb57611deb612745565b604051908082528060200260200182016040528015611e14578160200160208202803683370190505b50905060005b82811015611e6b57838181518110611e3457611e34612e60565b6020026020010151828281518110611e4e57611e4e612e60565b602090810291909101015280611e6381612c2b565b915050611e1a565b50949350505050565b600b6020526000908152604090208054611e8d90612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb990612c90565b8015611f065780601f10611edb57610100808354040283529160200191611f06565b820191906000526020600020905b815481529060010190602001808311611ee957829003601f168201915b505050505081565b6001600160a01b0381166000908152600d6020908152604080832054600b8352818420600e845282852054600a855283862054600990955292852054815460609587958695869560ff9091169490939192918490611f6b90612c90565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9790612c90565b8015611fe45780601f10611fb957610100808354040283529160200191611fe4565b820191906000526020600020905b815481529060010190602001808311611fc757829003601f168201915b50989f939e50959c50939a509198509650505050505050565b612005612694565b61200d6122f9565b47806120515760405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b60448201526064016108f1565b60006120656005546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d80600081146120af576040519150601f19603f3d011682016040523d82523d6000602084013e6120b4565b606091505b50509050806120f95760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b60448201526064016108f1565b50506111e26001600655565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b612138612694565b6121406122f9565b6000818152600760205260408120805490910361216f5760405162461bcd60e51b81526004016108f190612dd8565b6003600682015460ff16600581111561218a5761218a612911565b036121cf5760405162461bcd60e51b815260206004820152601560248201527415185cdac8185b1c9958591e481d995c9a599a5959605a1b60448201526064016108f1565b60068101805460ff19166005179055600181015460048201546040516000926001600160a01b031691908381818185875af1925050503d8060008114612231576040519150601f19603f3d011682016040523d82523d6000602084013e612236565b606091505b50509050806122775760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b60448201526064016108f1565b5050610de66001600655565b61228b612694565b6001600160a01b0381166122f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f1565b610de6816126ee565b60026006540361234b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108f1565b6002600655565b6001600160a01b0383166123b45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108f1565b6001600160a01b0382166124155760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108f1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006124828484612105565b905060001981146124ea57818110156124dd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108f1565b6124ea8484848403612352565b50505050565b6001600160a01b0383166125545760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016108f1565b6001600160a01b0382166125b65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108f1565b6001600160a01b0383166000908152602081905260409020548181101561262e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016108f1565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36124ea565b6005546001600160a01b031633146111e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108f1565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261276c57600080fd5b813567ffffffffffffffff8082111561278757612787612745565b604051601f8301601f19908116603f011681019082821181831017156127af576127af612745565b816040528381528660208588010111156127c857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156127fb57600080fd5b823567ffffffffffffffff81111561281257600080fd5b61281e8582860161275b565b95602094909401359450505050565b60005b83811015612848578181015183820152602001612830565b50506000910152565b6000815180845261286981602086016020860161282d565b601f01601f19169290920160200192915050565b6020815260006128906020830184612851565b9392505050565b80356001600160a01b03811681146128ae57600080fd5b919050565b6000602082840312156128c557600080fd5b61289082612897565b600080604083850312156128e157600080fd5b6128ea83612897565b946020939093013593505050565b60006020828403121561290a57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6006811061294557634e487b7160e01b600052602160045260246000fd5b9052565b60208152815160208201526000602083015161297060408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516101408060808501526129a2610160850183612851565b9150608085015160a085015260a085015160c085015260c08501516129ca60e0860182612927565b5060e0850151610100601f1986850301818701526129e88483612851565b9087015161012087810191909152909601519190940152509192915050565b600080600060608486031215612a1c57600080fd5b612a2584612897565b9250612a3360208501612897565b9150604084013590509250925092565b60008060408385031215612a5657600080fd5b82359150602083013567ffffffffffffffff811115612a7457600080fd5b612a808582860161275b565b9150509250929050565b60008060408385031215612a9d57600080fd5b82359150612aad60208401612897565b90509250929050565b600060208284031215612ac857600080fd5b813567ffffffffffffffff811115612adf57600080fd5b612aeb8482850161275b565b949350505050565b8a81526001600160a01b038a811660208301528916604082015261014060608201819052600090612b268382018b612851565b90508860808401528760a0840152612b4160c0840188612927565b82810360e0840152612b538187612851565b6101008401959095525050610120015298975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ba757835183529284019291840191600101612b8b565b50909695505050505050565b851515815260a060208201526000612bce60a0830187612851565b604083019590955250606081019290925260809091015292915050565b60008060408385031215612bfe57600080fd5b612c0783612897565b9150612aad60208401612897565b634e487b7160e01b600052601160045260246000fd5b600060018201612c3d57612c3d612c15565b5060010190565b8082028115828204841417610c0957610c09612c15565b600082612c7857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610c0957610c09612c15565b600181811c90821680612ca457607f821691505b602082108103612cc457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561274057600081815260208120601f850160051c81016020861015612cf15750805b601f850160051c820191505b81811015612d1057828155600101612cfd565b505050505050565b815167ffffffffffffffff811115612d3257612d32612745565b612d4681612d408454612c90565b84612cca565b602080601f831160018114612d7b5760008415612d635750858301515b600019600386901b1c1916600185901b178555612d10565b600085815260208120601f198616915b82811015612daa57888601518255948401946001909101908401612d8b565b5085821015612dc85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526013908201527215185cdac8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60208082526012908201527115185cdac81b9bdd0818dbdb5c1b195d195960721b604082015260600190565b80820180821115610c0957610c09612c15565b60008251612e5681846020870161282d565b9190910192915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122074b00649ee5433d29db2f6edafcf922850bb8cb0e1b5f0ec0c35f657b5d6c3a164736f6c63430008130033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"worker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":true,"internalType":"address","name":"worker","type":"address"}],"name":"TaskAssigned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"string","name":"resultHash","type":"string"}],"name":"TaskCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":true,"internalType":"address","name":"requester","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardAmount","type":"uint256"}],"name":"TaskCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}],"name":"TaskDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":true,"internalType":"address","name":"worker","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardAmount","type":"uint256"}],"name":"TaskVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"worker","type":"address"},{"indexed":false,"internalType":"string","name":"peerId","type":"string"}],"name":"WorkerRegistered","type":"event"},{"inputs":[],"name":"MIN_REWARD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PLATFORM_FEE_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TASK_TIMEOUT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VERIFICATION_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"address","name":"worker","type":"address"}],"name":"assignTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"autoVerifyTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"taskHash","type":"string"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"createTask","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"disputeTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"emergencyCancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"getAvailableTasks","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPlatformStats","outputs":[{"internalType":"uint256","name":"totalTasks","type":"uint256"},{"internalType":"uint256","name":"completedTasks","type":"uint256"},{"internalType":"uint256","name":"totalRewards","type":"uint256"},{"internalType":"uint256","name":"activeWorkers","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"getTask","outputs":[{"components":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"address","name":"requester","type":"address"},{"internalType":"address","name":"worker","type":"address"},{"internalType":"string","name":"taskHash","type":"string"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"enum ComputeReward.TaskStatus","name":"status","type":"uint8"},{"internalType":"string","name":"resultHash","type":"string"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"completedAt","type":"uint256"}],"internalType":"struct ComputeReward.ComputeTask","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserTasks","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"worker","type":"address"}],"name":"getWorkerInfo","outputs":[{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"string","name":"peerId","type":"string"},{"internalType":"uint256","name":"reputation","type":"uint256"},{"internalType":"uint256","name":"pendingRewards","type":"uint256"},{"internalType":"uint256","name":"completedTasks","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"worker","type":"address"}],"name":"getWorkerTasks","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextTaskId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"peerIdToWorker","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"peerId","type":"string"}],"name":"registerWorker","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"registeredWorkers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"string","name":"resultHash","type":"string"}],"name":"submitResult","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tasks","outputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"address","name":"requester","type":"address"},{"internalType":"address","name":"worker","type":"address"},{"internalType":"string","name":"taskHash","type":"string"},{"internalType":"uint256","name":"rewardAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"enum ComputeReward.TaskStatus","name":"status","type":"uint8"},{"internalType":"string","name":"resultHash","type":"string"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"completedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalRewardsDistributed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTasksCompleted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTasksCreated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userTasks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"verifyTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawPlatformFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"workerPeerIds","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"workerReputation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"workerRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"workerTasks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}